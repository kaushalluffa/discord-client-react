import React, { SetStateAction } from "react";
import { Socket } from "socket.io-client";
export interface SignupData {
  email: string;
  fullName: string;
  password: string;
  cPassword: string;
  showP: boolean;
  showCP: boolean;
}
export interface User {
  id: string;
  email: string;
  name: string;
  imageUrl: string | null;
}
export type LoggedInUser = {
  isAuthenticated: boolean;
  user: User | null;
};
export type AuthContextType = {
  loggedInUser: LoggedInUser;
  setLoggedInUser: React.Dispatch<SetStateAction<LoggedInUser>>;
};
export interface SocketContextType {
  socket: Socket | null;
  // setSocket: React.Dispatch<SetStateAction<Socket | null>> | null;
}

export interface ConversationContextType {
  allMessages: Message[];
  messagesEndRef: React.RefObject<HTMLDivElement>;
  currentConversation: Conversation | null;
  currentLoggedInMember: Member | null;
  setCurrentConversation: React.Dispatch<
    SetStateAction<Conversation | null>
  > | null;
}

export interface Message {
  id: string;
  body: string;
  conversationId: string;
  senderId: string;
  createdAt: string;
  updatedAt: string;
  sender: Sender;
}

export interface Sender {
  id: string;
  joinedAt: string;
  userId: string;
  conversationId: string;
  role: string;
  user: User;
}
// Generated by https://quicktype.io

export interface Conversation {
  id: string;
  isGroup: boolean;
  groupTitle: null;
  type: string;
  createdAt: string;
  updatedAt: string;
  members: Member[];
}

export interface Member {
  id: string;
  joinedAt: string;
  userId: string;
  conversationId: string;
  role: string;
  user: User;
}
export interface StartConversationModalProps {
  open: boolean;
  onClose: () => void;
}
export interface ChatListDrawerProps {
  conversations: Conversation[];
  loggedInUser: LoggedInUser;
  currentConversation: Conversation | null;
  drawerWidth: number;
}
export interface CustomAppBarProps {
  drawerWidth: number;
  currentLoggedInMember: Member | null;
}
export interface ConversationContainerProps {
  currentConversation: Conversation | null;
  drawerWidth: number;
  currentLoggedInMember: Member | null;
  loggedInUser: LoggedInUser;
  allMessages: Message[];
  messagesEndRef: React.RefObject<HTMLDivElement>;
}
export interface SendMessageContainerProps {
  currentConversation: Conversation | null;
  loggedInUser: LoggedInUser;
}
export interface MessagesListProps {
  allMessages: Message[];
  loggedInUser: LoggedInUser;
  messagesEndRef: React.RefObject<HTMLDivElement>;
}
export interface MessageCardProps {
  message: Message;
  loggedInUser: LoggedInUser;
  passRef: boolean;
  messagesEndRef: React.RefObject<HTMLDivElement>;
}
export interface ChatListItemProps {
  conversation: Conversation;
  loggedInUser: LoggedInUser;
  currentConversation: Conversation | null;
}
export interface SearchChatListItemProps {}

export interface AddUserListItemProps {
  setSelectedUsers: React.Dispatch<SetStateAction<User[]>>;
  user: User;
  selectedUsers: User[];
}
